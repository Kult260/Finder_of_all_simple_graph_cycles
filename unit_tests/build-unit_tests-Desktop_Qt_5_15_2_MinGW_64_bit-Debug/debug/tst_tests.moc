/****************************************************************************
** Meta object code from reading C++ file 'tst_tests.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.15.2)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_tests.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.15.2. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_TESTS_t {
    QByteArrayData data[19];
    char stringdata0[686];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_TESTS_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_TESTS_t qt_meta_stringdata_TESTS = {
    {
QT_MOC_LITERAL(0, 0, 5), // "TESTS"
QT_MOC_LITERAL(1, 6, 73), // "test_perform_coloring_for_ver..."
QT_MOC_LITERAL(2, 80, 0), // ""
QT_MOC_LITERAL(3, 81, 15), // "test_parseGraph"
QT_MOC_LITERAL(4, 97, 55), // "test_create_map_with_vertices..."
QT_MOC_LITERAL(5, 153, 43), // "test_fill_map_with_values_and..."
QT_MOC_LITERAL(6, 197, 53), // "test_fill_adjacency_list_of_g..."
QT_MOC_LITERAL(7, 251, 8), // "test_run"
QT_MOC_LITERAL(8, 260, 66), // "test_replace_vertices_with_th..."
QT_MOC_LITERAL(9, 327, 74), // "test_replace_vertex_numbers_w..."
QT_MOC_LITERAL(10, 402, 38), // "test_remove_whitespace_except..."
QT_MOC_LITERAL(11, 441, 32), // "test_find_repeated_arc_in_cycles"
QT_MOC_LITERAL(12, 474, 48), // "test_searching_for_substring_..."
QT_MOC_LITERAL(13, 523, 35), // "test_is_part_of_single_line_c..."
QT_MOC_LITERAL(14, 559, 27), // "test_find_comment_positions"
QT_MOC_LITERAL(15, 587, 25), // "test_convert_error_to_str"
QT_MOC_LITERAL(16, 613, 28), // "test_validate_dot_graph_info"
QT_MOC_LITERAL(17, 642, 19), // "test_read_text_file"
QT_MOC_LITERAL(18, 662, 23) // "test_write_text_to_file"

    },
    "TESTS\0"
    "test_perform_coloring_for_vertices_from_the_corresponding_cycles_in_gr"
    "aph\0"
    "\0test_parseGraph\0"
    "test_create_map_with_vertices_of_graphand_their_numbers\0"
    "test_fill_map_with_values_and_their_numbers\0"
    "test_fill_adjacency_list_of_graph_with_vertex_numbers\0"
    "test_run\0"
    "test_replace_vertices_with_their_serial_numbers_in_adjacency_lists\0"
    "test_replace_vertex_numbers_with_corresponding_vertices_in_adjacency_l"
    "ists\0"
    "test_remove_whitespace_except_new_line\0"
    "test_find_repeated_arc_in_cycles\0"
    "test_searching_for_substring_that_is_not_comment\0"
    "test_is_part_of_single_line_comment\0"
    "test_find_comment_positions\0"
    "test_convert_error_to_str\0"
    "test_validate_dot_graph_info\0"
    "test_read_text_file\0test_write_text_to_file"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_TESTS[] = {

 // content:
       8,       // revision
       0,       // classname
       0,    0, // classinfo
      17,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,   99,    2, 0x08 /* Private */,
       3,    0,  100,    2, 0x08 /* Private */,
       4,    0,  101,    2, 0x08 /* Private */,
       5,    0,  102,    2, 0x08 /* Private */,
       6,    0,  103,    2, 0x08 /* Private */,
       7,    0,  104,    2, 0x08 /* Private */,
       8,    0,  105,    2, 0x08 /* Private */,
       9,    0,  106,    2, 0x08 /* Private */,
      10,    0,  107,    2, 0x08 /* Private */,
      11,    0,  108,    2, 0x08 /* Private */,
      12,    0,  109,    2, 0x08 /* Private */,
      13,    0,  110,    2, 0x08 /* Private */,
      14,    0,  111,    2, 0x08 /* Private */,
      15,    0,  112,    2, 0x08 /* Private */,
      16,    0,  113,    2, 0x08 /* Private */,
      17,    0,  114,    2, 0x08 /* Private */,
      18,    0,  115,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void TESTS::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<TESTS *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->test_perform_coloring_for_vertices_from_the_corresponding_cycles_in_graph(); break;
        case 1: _t->test_parseGraph(); break;
        case 2: _t->test_create_map_with_vertices_of_graphand_their_numbers(); break;
        case 3: _t->test_fill_map_with_values_and_their_numbers(); break;
        case 4: _t->test_fill_adjacency_list_of_graph_with_vertex_numbers(); break;
        case 5: _t->test_run(); break;
        case 6: _t->test_replace_vertices_with_their_serial_numbers_in_adjacency_lists(); break;
        case 7: _t->test_replace_vertex_numbers_with_corresponding_vertices_in_adjacency_lists(); break;
        case 8: _t->test_remove_whitespace_except_new_line(); break;
        case 9: _t->test_find_repeated_arc_in_cycles(); break;
        case 10: _t->test_searching_for_substring_that_is_not_comment(); break;
        case 11: _t->test_is_part_of_single_line_comment(); break;
        case 12: _t->test_find_comment_positions(); break;
        case 13: _t->test_convert_error_to_str(); break;
        case 14: _t->test_validate_dot_graph_info(); break;
        case 15: _t->test_read_text_file(); break;
        case 16: _t->test_write_text_to_file(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

QT_INIT_METAOBJECT const QMetaObject TESTS::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_TESTS.data,
    qt_meta_data_TESTS,
    qt_static_metacall,
    nullptr,
    nullptr
} };


const QMetaObject *TESTS::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TESTS::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TESTS.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TESTS::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 17)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 17;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 17)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 17;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
